<%
records ||= []
class_obj ||= records.first.class
record_name = class_obj.to_s.underscore
ignore_cols ||= []
ignore_cols.uniq!
action_cols ||= %w(show edit destroy)
nosort_cols ||= []
list_cols ||= class_obj.column_names
cols_hash = class_obj.columns_hash
%>
<table id="<%= record_name.pluralize.parameterize('_') %>_list_<%= records.object_id %>" class="remote_sort_table sort_table <%= record_name.pluralize.parameterize('_') %>_table" cellspacing="0" cellpadding="0">
  <thead>
    <tr>
    <%
    list_cols.each do |col|
      next if cols_hash[col] and cols_hash[col].primary
      next if ignore_cols.include?(col)
      field_func = "#{col}_column"
      label_func = "#{col}_label"
    %>
      <th class="<%= sort_col(cols_hash[col]) %> <%= "sort#{params[:dir]}" if params[:sort]==col %> <%= "sortcol" unless nosort_cols.include?(col) %>">
        <%= self.respond_to?(label_func) ? send(label_func, col) : ttt(col.to_s) %>
      </th>
    <% end %>
    <% unless action_cols.empty? %>
      <th class="nosort actions" colspan="<%= action_cols.size %>"><%= image_tag "atreides/blank.gif" %></th>
    <% end %>
    </tr>
  </thead>
  <tbody>
    <%= render :partial => 'admin/common/list_table_row', :collection => records, :as => :record, :locals => { :list_cols => list_cols, :cols_hash => cols_hash, :ignore_cols => ignore_cols, :action_cols => action_cols, :record_name => record_name } %>
  </tbody>
</table>
<p class="pagination">
  <%= will_paginate records if records.respond_to? :total_pages %>
</p>